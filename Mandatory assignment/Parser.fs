// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "./Parser.fsy"

open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | LSQR
  | RSQR
  | SKIP
  | SEMICOLON
  | AND
  | OR
  | SAND
  | SOR
  | NOT
  | EQV
  | DIFF
  | GREATER
  | GREATEREQV
  | LESS
  | LESSEQV
  | ASSIGN
  | IF
  | FI
  | DO
  | OD
  | ARROW
  | BRACKETS
  | EOF
  | BOOL of (bool)
  | STRING of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LSQR
    | TOKEN_RSQR
    | TOKEN_SKIP
    | TOKEN_SEMICOLON
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_NOT
    | TOKEN_EQV
    | TOKEN_DIFF
    | TOKEN_GREATER
    | TOKEN_GREATEREQV
    | TOKEN_LESS
    | TOKEN_LESSEQV
    | TOKEN_ASSIGN
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_ARROW
    | TOKEN_BRACKETS
    | TOKEN_EOF
    | TOKEN_BOOL
    | TOKEN_STRING
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstartGCL
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_startGCL
    | NONTERM_startS
    | NONTERM_command
    | NONTERM_guardedcommand
    | NONTERM_bool
    | NONTERM_expression
    | NONTERM_expression1

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TIMES  -> 0 
  | DIV  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | POW  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | LSQR  -> 7 
  | RSQR  -> 8 
  | SKIP  -> 9 
  | SEMICOLON  -> 10 
  | AND  -> 11 
  | OR  -> 12 
  | SAND  -> 13 
  | SOR  -> 14 
  | NOT  -> 15 
  | EQV  -> 16 
  | DIFF  -> 17 
  | GREATER  -> 18 
  | GREATEREQV  -> 19 
  | LESS  -> 20 
  | LESSEQV  -> 21 
  | ASSIGN  -> 22 
  | IF  -> 23 
  | FI  -> 24 
  | DO  -> 25 
  | OD  -> 26 
  | ARROW  -> 27 
  | BRACKETS  -> 28 
  | EOF  -> 29 
  | BOOL _ -> 30 
  | STRING _ -> 31 
  | NUM _ -> 32 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TIMES 
  | 1 -> TOKEN_DIV 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_POW 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_LSQR 
  | 8 -> TOKEN_RSQR 
  | 9 -> TOKEN_SKIP 
  | 10 -> TOKEN_SEMICOLON 
  | 11 -> TOKEN_AND 
  | 12 -> TOKEN_OR 
  | 13 -> TOKEN_SAND 
  | 14 -> TOKEN_SOR 
  | 15 -> TOKEN_NOT 
  | 16 -> TOKEN_EQV 
  | 17 -> TOKEN_DIFF 
  | 18 -> TOKEN_GREATER 
  | 19 -> TOKEN_GREATEREQV 
  | 20 -> TOKEN_LESS 
  | 21 -> TOKEN_LESSEQV 
  | 22 -> TOKEN_ASSIGN 
  | 23 -> TOKEN_IF 
  | 24 -> TOKEN_FI 
  | 25 -> TOKEN_DO 
  | 26 -> TOKEN_OD 
  | 27 -> TOKEN_ARROW 
  | 28 -> TOKEN_BRACKETS 
  | 29 -> TOKEN_EOF 
  | 30 -> TOKEN_BOOL 
  | 31 -> TOKEN_STRING 
  | 32 -> TOKEN_NUM 
  | 35 -> TOKEN_end_of_input
  | 33 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstartGCL 
    | 1 -> NONTERM__startstart 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_startGCL 
    | 4 -> NONTERM_startS 
    | 5 -> NONTERM_command 
    | 6 -> NONTERM_command 
    | 7 -> NONTERM_command 
    | 8 -> NONTERM_command 
    | 9 -> NONTERM_command 
    | 10 -> NONTERM_command 
    | 11 -> NONTERM_guardedcommand 
    | 12 -> NONTERM_guardedcommand 
    | 13 -> NONTERM_bool 
    | 14 -> NONTERM_bool 
    | 15 -> NONTERM_bool 
    | 16 -> NONTERM_bool 
    | 17 -> NONTERM_bool 
    | 18 -> NONTERM_bool 
    | 19 -> NONTERM_bool 
    | 20 -> NONTERM_bool 
    | 21 -> NONTERM_bool 
    | 22 -> NONTERM_bool 
    | 23 -> NONTERM_bool 
    | 24 -> NONTERM_bool 
    | 25 -> NONTERM_bool 
    | 26 -> NONTERM_expression 
    | 27 -> NONTERM_expression 
    | 28 -> NONTERM_expression 
    | 29 -> NONTERM_expression 
    | 30 -> NONTERM_expression 
    | 31 -> NONTERM_expression 
    | 32 -> NONTERM_expression 
    | 33 -> NONTERM_expression1 
    | 34 -> NONTERM_expression1 
    | 35 -> NONTERM_expression1 
    | 36 -> NONTERM_expression1 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 35 
let _fsyacc_tagOfErrorTerminal = 33

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LSQR  -> "LSQR" 
  | RSQR  -> "RSQR" 
  | SKIP  -> "SKIP" 
  | SEMICOLON  -> "SEMICOLON" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | SAND  -> "SAND" 
  | SOR  -> "SOR" 
  | NOT  -> "NOT" 
  | EQV  -> "EQV" 
  | DIFF  -> "DIFF" 
  | GREATER  -> "GREATER" 
  | GREATEREQV  -> "GREATEREQV" 
  | LESS  -> "LESS" 
  | LESSEQV  -> "LESSEQV" 
  | ASSIGN  -> "ASSIGN" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | ARROW  -> "ARROW" 
  | BRACKETS  -> "BRACKETS" 
  | EOF  -> "EOF" 
  | BOOL _ -> "BOOL" 
  | STRING _ -> "STRING" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LSQR  -> (null : System.Object) 
  | RSQR  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | SAND  -> (null : System.Object) 
  | SOR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQV  -> (null : System.Object) 
  | DIFF  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | GREATEREQV  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | LESSEQV  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | BRACKETS  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 1us; 65535us; 2us; 3us; 1us; 65535us; 0us; 1us; 0us; 65535us; 3us; 65535us; 0us; 6us; 19us; 17us; 27us; 18us; 3us; 65535us; 20us; 21us; 23us; 24us; 29us; 28us; 9us; 65535us; 20us; 26us; 23us; 26us; 29us; 26us; 37us; 31us; 38us; 32us; 39us; 33us; 40us; 34us; 41us; 35us; 56us; 36us; 26us; 65535us; 2us; 4us; 9us; 10us; 11us; 12us; 14us; 15us; 20us; 42us; 23us; 42us; 29us; 42us; 37us; 42us; 38us; 42us; 39us; 42us; 40us; 42us; 41us; 42us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 43us; 65us; 58us; 66us; 59us; 67us; 60us; 68us; 61us; 69us; 62us; 71us; 63us; 78us; 64us; 27us; 65535us; 2us; 73us; 9us; 73us; 11us; 73us; 14us; 73us; 20us; 73us; 23us; 73us; 29us; 73us; 37us; 73us; 38us; 73us; 39us; 73us; 40us; 73us; 41us; 73us; 44us; 73us; 46us; 73us; 48us; 73us; 50us; 73us; 52us; 73us; 54us; 73us; 56us; 73us; 65us; 73us; 66us; 73us; 67us; 73us; 68us; 73us; 69us; 73us; 71us; 73us; 74us; 75us; 78us; 73us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 4us; 6us; 7us; 11us; 15us; 25us; 52us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 6us; 2us; 26us; 27us; 28us; 29us; 30us; 1us; 2us; 2us; 3us; 8us; 1us; 3us; 2us; 5us; 6us; 1us; 5us; 6us; 5us; 26us; 27us; 28us; 29us; 30us; 1us; 6us; 6us; 6us; 26us; 27us; 28us; 29us; 30us; 1us; 6us; 1us; 6us; 6us; 6us; 26us; 27us; 28us; 29us; 30us; 1us; 7us; 2us; 8us; 8us; 2us; 8us; 11us; 1us; 8us; 1us; 9us; 2us; 9us; 12us; 1us; 9us; 1us; 10us; 2us; 10us; 12us; 1us; 10us; 5us; 11us; 14us; 15us; 16us; 17us; 1us; 11us; 2us; 12us; 12us; 1us; 12us; 1us; 13us; 5us; 14us; 14us; 15us; 16us; 17us; 5us; 14us; 15us; 15us; 16us; 17us; 5us; 14us; 15us; 16us; 16us; 17us; 5us; 14us; 15us; 16us; 17us; 17us; 5us; 14us; 15us; 16us; 17us; 18us; 5us; 14us; 15us; 16us; 17us; 25us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 11us; 19us; 20us; 21us; 22us; 23us; 24us; 26us; 27us; 28us; 29us; 30us; 12us; 19us; 20us; 21us; 22us; 23us; 24us; 26us; 27us; 28us; 29us; 30us; 36us; 1us; 19us; 6us; 19us; 26us; 27us; 28us; 29us; 30us; 1us; 20us; 6us; 20us; 26us; 27us; 28us; 29us; 30us; 1us; 21us; 6us; 21us; 26us; 27us; 28us; 29us; 30us; 1us; 22us; 6us; 22us; 26us; 27us; 28us; 29us; 30us; 1us; 23us; 6us; 23us; 26us; 27us; 28us; 29us; 30us; 1us; 24us; 6us; 24us; 26us; 27us; 28us; 29us; 30us; 2us; 25us; 36us; 1us; 25us; 6us; 26us; 26us; 27us; 28us; 29us; 30us; 6us; 26us; 27us; 27us; 28us; 29us; 30us; 6us; 26us; 27us; 28us; 28us; 29us; 30us; 6us; 26us; 27us; 28us; 29us; 29us; 30us; 6us; 26us; 27us; 28us; 29us; 30us; 30us; 6us; 26us; 27us; 28us; 29us; 30us; 31us; 6us; 26us; 27us; 28us; 29us; 30us; 36us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 2us; 31us; 35us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 36us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 15us; 17us; 20us; 22us; 25us; 27us; 34us; 36us; 43us; 45us; 47us; 54us; 56us; 59us; 62us; 64us; 66us; 69us; 71us; 73us; 76us; 78us; 84us; 86us; 89us; 91us; 93us; 99us; 105us; 111us; 117us; 123us; 129us; 131us; 133us; 135us; 137us; 139us; 151us; 164us; 166us; 173us; 175us; 182us; 184us; 191us; 193us; 200us; 202us; 209us; 211us; 218us; 221us; 223us; 230us; 237us; 244us; 251us; 258us; 265us; 272us; 274us; 276us; 278us; 280us; 282us; 285us; 287us; 289us; 291us; 293us; 295us; 297us; 299us; 301us; |]
let _fsyacc_action_rows = 80
let _fsyacc_actionTableElements = [|4us; 32768us; 9us; 16us; 23us; 20us; 25us; 23us; 31us; 8us; 0us; 49152us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 0us; 49152us; 6us; 32768us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 29us; 5us; 0us; 16386us; 2us; 32768us; 10us; 19us; 29us; 7us; 0us; 16387us; 2us; 32768us; 7us; 11us; 22us; 9us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 5us; 16389us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 6us; 32768us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 8us; 13us; 1us; 32768us; 22us; 14us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 5us; 16390us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 0us; 16391us; 1us; 16392us; 10us; 19us; 1us; 16395us; 10us; 19us; 4us; 32768us; 9us; 16us; 23us; 20us; 25us; 23us; 31us; 8us; 6us; 32768us; 3us; 74us; 5us; 56us; 15us; 41us; 30us; 30us; 31us; 70us; 32us; 76us; 2us; 32768us; 24us; 22us; 28us; 29us; 0us; 16393us; 6us; 32768us; 3us; 74us; 5us; 56us; 15us; 41us; 30us; 30us; 31us; 70us; 32us; 76us; 2us; 32768us; 26us; 25us; 28us; 29us; 0us; 16394us; 5us; 32768us; 11us; 37us; 12us; 38us; 13us; 39us; 14us; 40us; 27us; 27us; 4us; 32768us; 9us; 16us; 23us; 20us; 25us; 23us; 31us; 8us; 1us; 16396us; 28us; 29us; 6us; 32768us; 3us; 74us; 5us; 56us; 15us; 41us; 30us; 30us; 31us; 70us; 32us; 76us; 0us; 16397us; 0us; 16398us; 2us; 16399us; 11us; 37us; 13us; 39us; 0us; 16400us; 2us; 16401us; 11us; 37us; 13us; 39us; 0us; 16402us; 5us; 32768us; 6us; 57us; 11us; 37us; 12us; 38us; 13us; 39us; 14us; 40us; 6us; 32768us; 3us; 74us; 5us; 56us; 15us; 41us; 30us; 30us; 31us; 70us; 32us; 76us; 6us; 32768us; 3us; 74us; 5us; 56us; 15us; 41us; 30us; 30us; 31us; 70us; 32us; 76us; 6us; 32768us; 3us; 74us; 5us; 56us; 15us; 41us; 30us; 30us; 31us; 70us; 32us; 76us; 6us; 32768us; 3us; 74us; 5us; 56us; 15us; 41us; 30us; 30us; 31us; 70us; 32us; 76us; 6us; 32768us; 3us; 74us; 5us; 56us; 15us; 41us; 30us; 30us; 31us; 70us; 32us; 76us; 11us; 32768us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 16us; 44us; 17us; 46us; 18us; 48us; 19us; 50us; 20us; 52us; 21us; 54us; 12us; 32768us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 6us; 79us; 16us; 44us; 17us; 46us; 18us; 48us; 19us; 50us; 20us; 52us; 21us; 54us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 5us; 16403us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 5us; 16404us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 5us; 16405us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 5us; 16406us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 5us; 16407us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 5us; 16408us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 6us; 32768us; 3us; 74us; 5us; 56us; 15us; 41us; 30us; 30us; 31us; 70us; 32us; 76us; 0us; 16409us; 1us; 16410us; 4us; 69us; 1us; 16411us; 4us; 69us; 3us; 16412us; 0us; 65us; 1us; 66us; 4us; 69us; 3us; 16413us; 0us; 65us; 1us; 66us; 4us; 69us; 1us; 16414us; 4us; 69us; 6us; 32768us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 8us; 72us; 6us; 32768us; 0us; 65us; 1us; 66us; 2us; 67us; 3us; 68us; 4us; 69us; 6us; 79us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 1us; 16419us; 7us; 71us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 0us; 16415us; 0us; 16416us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 77us; 32us; 76us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 4us; 32768us; 3us; 74us; 5us; 78us; 31us; 70us; 32us; 76us; 0us; 16420us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 11us; 12us; 19us; 20us; 23us; 24us; 27us; 32us; 38us; 43us; 50us; 52us; 57us; 63us; 64us; 66us; 68us; 73us; 80us; 83us; 84us; 91us; 94us; 95us; 101us; 106us; 108us; 115us; 116us; 117us; 120us; 121us; 124us; 125us; 131us; 138us; 145us; 152us; 159us; 166us; 178us; 191us; 196us; 202us; 207us; 213us; 218us; 224us; 229us; 235us; 240us; 246us; 251us; 257us; 264us; 265us; 267us; 269us; 273us; 277us; 279us; 286us; 293us; 298us; 303us; 308us; 313us; 318us; 320us; 325us; 326us; 327us; 332us; 333us; 334us; 335us; 340us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 2us; 2us; 3us; 6us; 1us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 1us; 2us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 9us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 16386us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 16416us; 65535us; 16417us; 16418us; 16419us; 65535us; 16420us; |]
let _fsyacc_reductions ()  =    [| 
# 302 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstartGCL));
# 311 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 320 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "./Parser.fsy"
                                                         _1 
                   )
# 43 "./Parser.fsy"
                 : AST.expr));
# 331 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "./Parser.fsy"
                                                         _1 
                   )
# 44 "./Parser.fsy"
                 : AST.Command));
# 342 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "./Parser.fsy"
                                                         _1 
                   )
# 45 "./Parser.fsy"
                 : 'gentype_startS));
# 353 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "./Parser.fsy"
                                                                         Assign(_1, _3) 
                   )
# 48 "./Parser.fsy"
                 : AST.Command));
# 365 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            let _6 = parseState.GetInput(6) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "./Parser.fsy"
                                                                         AssignArray(_1, _3, _6)
                   )
# 49 "./Parser.fsy"
                 : AST.Command));
# 378 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "./Parser.fsy"
                                                                         Skip 
                   )
# 50 "./Parser.fsy"
                 : AST.Command));
# 388 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Command in
            let _3 = parseState.GetInput(3) :?> AST.Command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "./Parser.fsy"
                                                                         Sequence(_1, _3) 
                   )
# 51 "./Parser.fsy"
                 : AST.Command));
# 400 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.GuardedCommand in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "./Parser.fsy"
                                                                         If(_2) 
                   )
# 52 "./Parser.fsy"
                 : AST.Command));
# 411 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.GuardedCommand in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "./Parser.fsy"
                                                                         Do(_2) 
                   )
# 53 "./Parser.fsy"
                 : AST.Command));
# 422 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bool in
            let _3 = parseState.GetInput(3) :?> AST.Command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "./Parser.fsy"
                                                                         Condition(_1, _3) 
                   )
# 56 "./Parser.fsy"
                 : AST.GuardedCommand));
# 434 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.GuardedCommand in
            let _3 = parseState.GetInput(3) :?> AST.GuardedCommand in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "./Parser.fsy"
                                                                         Else(_1, _3) 
                   )
# 57 "./Parser.fsy"
                 : AST.GuardedCommand));
# 446 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "./Parser.fsy"
                                                       Bool(_1) 
                   )
# 60 "./Parser.fsy"
                 : 'gentype_bool));
# 457 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bool in
            let _3 = parseState.GetInput(3) :?> 'gentype_bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "./Parser.fsy"
                                                       And(_1, _3) 
                   )
# 61 "./Parser.fsy"
                 : 'gentype_bool));
# 469 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bool in
            let _3 = parseState.GetInput(3) :?> 'gentype_bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "./Parser.fsy"
                                                       Or(_1, _3) 
                   )
# 62 "./Parser.fsy"
                 : 'gentype_bool));
# 481 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bool in
            let _3 = parseState.GetInput(3) :?> 'gentype_bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "./Parser.fsy"
                                                       SAnd(_1, _3) 
                   )
# 63 "./Parser.fsy"
                 : 'gentype_bool));
# 493 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bool in
            let _3 = parseState.GetInput(3) :?> 'gentype_bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "./Parser.fsy"
                                                       SOr(_1, _3) 
                   )
# 64 "./Parser.fsy"
                 : 'gentype_bool));
# 505 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "./Parser.fsy"
                                                       Not(_2) 
                   )
# 65 "./Parser.fsy"
                 : 'gentype_bool));
# 516 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "./Parser.fsy"
                                                                   Eqv(_1, _3) 
                   )
# 66 "./Parser.fsy"
                 : 'gentype_bool));
# 528 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "./Parser.fsy"
                                                                   Diff(_1, _3) 
                   )
# 67 "./Parser.fsy"
                 : 'gentype_bool));
# 540 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "./Parser.fsy"
                                                                   Greater(_1, _3) 
                   )
# 68 "./Parser.fsy"
                 : 'gentype_bool));
# 552 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "./Parser.fsy"
                                                                   GreaterEqv(_1, _3) 
                   )
# 69 "./Parser.fsy"
                 : 'gentype_bool));
# 564 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "./Parser.fsy"
                                                                   Less(_1, _3) 
                   )
# 70 "./Parser.fsy"
                 : 'gentype_bool));
# 576 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "./Parser.fsy"
                                                                   LessEqv(_1, _3) 
                   )
# 71 "./Parser.fsy"
                 : 'gentype_bool));
# 588 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "./Parser.fsy"
                                                       _2 
                   )
# 72 "./Parser.fsy"
                 : 'gentype_bool));
# 599 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "./Parser.fsy"
                                                         TimesExpr(_1,_3) 
                   )
# 82 "./Parser.fsy"
                 : AST.expr));
# 611 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "./Parser.fsy"
                                                         DivExpr(_1,_3) 
                   )
# 83 "./Parser.fsy"
                 : AST.expr));
# 623 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "./Parser.fsy"
                                                         PlusExpr(_1,_3) 
                   )
# 84 "./Parser.fsy"
                 : AST.expr));
# 635 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "./Parser.fsy"
                                                         MinusExpr(_1,_3) 
                   )
# 85 "./Parser.fsy"
                 : AST.expr));
# 647 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "./Parser.fsy"
                                                         PowExpr(_1,_3) 
                   )
# 86 "./Parser.fsy"
                 : AST.expr));
# 659 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "./Parser.fsy"
                                                         Array(_1, _3) 
                   )
# 87 "./Parser.fsy"
                 : AST.expr));
# 671 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "./Parser.fsy"
                                                         _1 
                   )
# 88 "./Parser.fsy"
                 : AST.expr));
# 682 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "./Parser.fsy"
                                                         UMinusExpr(_2) 
                   )
# 91 "./Parser.fsy"
                 : AST.expr));
# 693 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "./Parser.fsy"
                                                         Num(_1) 
                   )
# 92 "./Parser.fsy"
                 : AST.expr));
# 704 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "./Parser.fsy"
                                                         Variable(_1) 
                   )
# 93 "./Parser.fsy"
                 : AST.expr));
# 715 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> AST.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "./Parser.fsy"
                                                         _2 
                   )
# 94 "./Parser.fsy"
                 : AST.expr));
|]
# 727 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 36;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let startGCL lexer lexbuf : AST.Command =
    engine lexer lexbuf 0 :?> _
let start lexer lexbuf : AST.expr =
    engine lexer lexbuf 2 :?> _
