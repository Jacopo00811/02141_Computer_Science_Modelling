// Open the file that defines the type "expr" we shall use as AST
%{
open AST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> STRING
%token <bool> BOOL
%token TIMES DIV PLUS MINUS POW LPAR RPAR LSQR RSQR SKIP SEMICOLON AND OR SAND SOR NOT EQV DIFF GREATER GREATEREQV LESS LESSEQV ASSIGN IF FI DO OD ARROW BRACKETS EOF
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left PLUS MINUS OR SOR 
%left TIMES DIV AND SAND 
%right POW NOT SEMICOLON
%nonassoc LPAR RPAR


// We declare the initial non-terminal symbol
%start start
%start startGCL
//%start startS

// We specify the return type of each of then non-terminal symbols
%type <AST.expr> start
%type <AST.expr> expression
%type <AST.expr> expression1
%type <AST.Command> startGCL
%type <AST.Command> command
//%type <AST.Bool> startS
//%type <AST.Bool> bool
%type <AST.GuardedCommand> guardedcommand

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: expression EOF             { $1 }
startGCL: command EOF             { $1 }
startS: bool EOF                  { $1 }

command:
  | STRING ASSIGN expression                      { Assign($1, $3) }
  | STRING LSQR expression RSQR ASSIGN expression { AssignArray($1, $3, $6)}
  | SKIP                                          { Skip }
  | command SEMICOLON command                     { Sequence($1, $3) }
  | IF guardedcommand FI                          { If($2) }
  | DO guardedcommand OD                          { Do($2) }

guardedcommand:
  | bool ARROW command                            { Condition($1, $3) }
  | guardedcommand BRACKETS guardedcommand        { Else($1, $3) }

bool:
  | BOOL                        { Bool($1) }
  | bool AND bool               { And($1, $3) }
  | bool OR bool                { Or($1, $3) }
  | bool SAND bool              { SAnd($1, $3) }
  | bool SOR bool               { SOr($1, $3) }
  | NOT bool                    { Not($2) }
  | expression EQV expression               { Eqv($1, $3) }
  | expression DIFF expression              { Diff($1, $3) }
  | expression GREATER expression           { Greater($1, $3) }
  | expression GREATEREQV expression        { GreaterEqv($1, $3) }
  | expression LESS expression              { Less($1, $3) }
  | expression LESSEQV expression           { LessEqv($1, $3) }
  | LPAR bool RPAR              { $2 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:
expression:
  | expression TIMES expression   { TimesExpr($1,$3) }
  | expression DIV expression     { DivExpr($1,$3) }
  | expression PLUS expression    { PlusExpr($1,$3) }
  | expression MINUS expression   { MinusExpr($1,$3) }
  | expression POW expression     { PowExpr($1,$3) }
  | STRING LSQR expression RSQR   { Array($1, $3) }
  | expression1                   { $1 }

expression1:
  | MINUS expression1             { UMinusExpr($2) }
  | NUM                           { Num($1) }
  | STRING                        { Variable($1) }
  | LPAR expression RPAR          { $2 }


// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%


// Keywords if, fi and do, od shouldn't be allowed 
// The precedence of parenthesis is not being considered e. g. the expression x:= -2*(5+3) 
