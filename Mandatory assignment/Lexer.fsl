// The generated lexer module will start with this code
{
open FSharp.Text.Lexing
open System
// open the module that defines the tokens
open Parser
// Set the language to English such that 4.0 is parsed as 4 and not 40.
System.Globalization.CultureInfo.CurrentCulture <- new System.Globalization.CultureInfo("en-US")
}

// We define macros for some regular expressions we will use later
let digit       = ['0'-'9']
let num         = digit+
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let bool        = "true" | "false"
let characters  = ['a'-'z']
let capital     = ['A'-'Z']
let alphabet    = characters | capital
let string      = alphabet+

// We define now the rules for recognising and building tokens
// for each of the tokens of our language we need a rule
// NOTE: rules are applied in order top-down.
//       This is important when tokens overlap (not in this example)
rule tokenize = parse
// deal with tokens that need to be ignored (skip them)
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
// deal with tokens that need to be built
| num           { NUM(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
| '['           { LSQR }
| ']'           { RSQR }
| ":="          { ASSIGN }
| "->"          { ARROW }
| "[]"          { BRACKETS }
| "skip"        { SKIP }
| ';'           { SEMICOLON }
| "if" + whitespace { IF }
| "fi" { FI }
| "do" + whitespace { DO }
| "od" { OD }
| bool          { BOOL(bool.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| '&'           { AND }
| '|'           { OR }
| "&&"          { SAND }
| "||"          { SOR }
| '!'           { NOT }
| '='           { EQV }
| "!="          { DIFF }
| '>'           { GREATER }
| ">="          { GREATEREQV }
| '<'           { LESS }
| "<="          { LESSEQV }
| string        { STRING(LexBuffer<_>.LexemeString lexbuf) }
| eof           { EOF }
