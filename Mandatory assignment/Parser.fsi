// Signature file for parser generated by fsyacc
module Parser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | LSQR
  | RSQR
  | SKIP
  | SEMICOLON
  | AND
  | OR
  | SAND
  | SOR
  | NOT
  | EQV
  | DIFF
  | GREATER
  | GREATEREQV
  | LESS
  | LESSEQV
  | ASSIGN
  | IF
  | FI
  | DO
  | OD
  | ARROW
  | BRACKETS
  | EOF
  | BOOL of (bool)
  | STRING of (string)
  | NUM of (int)
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LSQR
    | TOKEN_RSQR
    | TOKEN_SKIP
    | TOKEN_SEMICOLON
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_NOT
    | TOKEN_EQV
    | TOKEN_DIFF
    | TOKEN_GREATER
    | TOKEN_GREATEREQV
    | TOKEN_LESS
    | TOKEN_LESSEQV
    | TOKEN_ASSIGN
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_ARROW
    | TOKEN_BRACKETS
    | TOKEN_EOF
    | TOKEN_BOOL
    | TOKEN_STRING
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstartGCL
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_startGCL
    | NONTERM_startS
    | NONTERM_command
    | NONTERM_guardedcommand
    | NONTERM_bool
    | NONTERM_expression
    | NONTERM_expression1
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val startGCL : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (AST.Command) 
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (AST.expr) 
